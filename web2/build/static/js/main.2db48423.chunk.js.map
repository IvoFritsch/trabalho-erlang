{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["resolveStyleProduto","produto","toLowerCase","background","color","App","useState","QtdFanta","QtdCoca","estoque","setEstoque","produtores","setProdutores","consumidores","setConsumidores","useEffect","WebSocket","onmessage","m","data","startsWith","payload","JSON","parse","event","e","p","np","c","nc","acao","Grid","container","spacing","style","paddingTop","item","flexGrow","justify","Object","keys","map","Fragment","key","xs","Paper","padding","textAlign","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQAKA,SAASA,IAAmC,IAAfC,EAAc,uDAAJ,GACrC,OAAOA,EAAQC,eACb,IAAK,QAAS,MAAO,CAAEC,WAAY,UAAWC,MAAO,SACrD,IAAK,OAAQ,MAAO,CAAED,WAAY,UAAWC,MAAO,SACpD,QAAS,QA6GEC,MAzGf,WAAgB,IAAD,EACiBC,mBAAS,CAACC,SAAU,EAAGC,QAAS,IADjD,mBACNC,EADM,KACGC,EADH,OAEuBJ,mBAAS,IAFhC,mBAENK,EAFM,KAEMC,EAFN,OAG2BN,mBAAS,IAHpC,mBAGNO,EAHM,KAGQC,EAHR,KAgDb,OA3CAC,qBAAU,WACC,IAAIC,UAAU,uBACpBC,UAAY,SAACC,GACd,GAAIA,EAAEC,KAAKC,WAAW,KAAtB,CACA,IAAMC,EAAUC,KAAKC,MAAML,EAAEC,MAC7B,OAAOE,EAAQG,OACb,IAAK,UACHd,GAAW,SAAAe,GAAC,sBAELA,EAFK,GAGLJ,MAGP,MACF,IAAK,WACHT,GAAc,SAAAc,GAAC,sBAERA,EAFQ,kBAGLL,EAAQM,GAAKN,EAAQpB,aAG/B,MACF,IAAK,wBACDa,GAAgB,SAAAc,GAAC,sBAEVA,EAFU,kBAGPP,EAAQQ,GAAK,CAAEC,KAAM,aAAc7B,QAAQoB,EAAQpB,cAG7D,MACJ,IAAK,uBACCa,GAAgB,SAAAc,GAAC,sBAEVA,EAFU,kBAGPP,EAAQQ,GAAK,CAAEC,KAAM,YAAa7B,QAAQoB,EAAQpB,mBAOrE,IAGD,kBAAC8B,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,MAAO,CAACC,WAAY,SAE9C,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACF,MAAO,CAACG,SAAU,MACzB,kBAACN,EAAA,EAAD,CAAMC,WAAS,EAACM,QAAQ,SAASL,QAAS,GAE1C,kBAACF,EAAA,EAAD,CAAMK,MAAI,GACPG,OAAOC,KAAK7B,GAAY8B,KAAI,SAAAd,GAAE,OAC3B,kBAAC,IAAMe,SAAP,CAAgBC,IAAKhB,GACnB,kBAACI,EAAA,EAAD,CAAMK,MAAI,EAACQ,GAAI,IACb,kBAACC,EAAA,EAAD,CAAOX,MAAOlC,EAAoBW,EAAWgB,KAC3C,yBAAKO,MAAO,CAACY,QAAS,OAAQC,UAAW,SAAUC,WAAY,SAC7D,wCAAcrB,GACd,6BACChB,EAAWgB,GAAX,sBACchB,EAAWgB,IAC1B,mBAIN,kCAIR,kBAACI,EAAA,EAAD,CAAMK,MAAI,GACR,kBAACS,EAAA,EAAD,KACE,yBAAKX,MAAO,CAACY,QAAS,OAAQC,UAAW,SAAUC,WAAY,SAC7D,uCACA,6BAFF,eAGevC,EAAQD,QACrB,6BAJF,gBAKgBC,EAAQF,YAI5B,kBAACwB,EAAA,EAAD,CAAMK,MAAI,GACPG,OAAOC,KAAK3B,GAAc4B,KAAI,SAAAZ,GAAE,OAC7B,kBAAC,IAAMa,SAAP,CAAgBC,IAAKd,GACnB,kBAACE,EAAA,EAAD,CAAMK,MAAI,EAACQ,GAAI,IACb,kBAACC,EAAA,EAAD,CAAOX,MAAOlC,EAAoBa,EAAagB,GAAI5B,UACjD,yBAAKiC,MAAO,CAACY,QAAS,OAAQC,UAAW,SAAUC,WAAY,SAC7D,0CAAgBnB,GAChB,6BACChB,EAAagB,GAAIC,KAHpB,KAG4BjB,EAAagB,GAAI5B,WAIjD,sCChGEgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2db48423.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport './App.css';\n\nfunction resolveStyleProduto(produto = '') {\n  switch(produto.toLowerCase()){\n    case \"fanta\": return { background: '#a63aae', color: 'white'}\n    case \"coca\": return { background: '#fe001a', color: 'white'}\n    default: return undefined\n  }\n}\n\nfunction App() {\n  const [estoque, setEstoque] = useState({QtdFanta: 0, QtdCoca: 0})\n  const [produtores, setProdutores] = useState({})\n  const [consumidores, setConsumidores] = useState({})\n  \n  useEffect(function conectaSocket(){\n    let ws = new WebSocket('ws://localhost:8080')\n    ws.onmessage = (m) => {\n      if(!m.data.startsWith('{')) return\n      const payload = JSON.parse(m.data)\n      switch(payload.event){\n        case \"ESTOQUE\":\n          setEstoque(e => (\n            {\n              ...e, \n              ...payload\n            }\n          ))\n          break\n        case \"PRODUTOR\":\n          setProdutores(p => (\n            {\n              ...p, \n              ...{ [payload.np]: payload.produto }\n            }\n          ))\n          break\n        case \"CONSUMIDOR-CONSUMINDO\":\n            setConsumidores(c => (\n              {\n                ...c, \n                ...{ [payload.nc]: { acao: 'Consumindo', produto:payload.produto} }\n              }\n            ))\n            break\n        case \"CONSUMIDOR-ESPERANDO\":\n              setConsumidores(c => (\n                {\n                  ...c, \n                  ...{ [payload.nc]: { acao: 'Esperando', produto:payload.produto} }\n                }\n              ))\n              break\n        default: break\n      }\n    }\n  }, [])\n\n  return (\n    <Grid container spacing={2} style={{paddingTop: '20px'}}>\n      \n      <Grid item style={{flexGrow: '1'}}>\n          <Grid container justify=\"center\" spacing={8}>\n\n          <Grid item>\n            {Object.keys(produtores).map(np => \n                <React.Fragment key={np}>\n                  <Grid item xs={12}>\n                    <Paper style={resolveStyleProduto(produtores[np])}>\n                      <div style={{padding: '10px', textAlign: 'center', fontWeight: 'bold'}}>\n                        <h2>Produtor {np}</h2>\n                        <hr/>\n                        {produtores[np] ? \n                        `Produzindo: ${produtores[np]}` :\n                        'Preparando...'}\n                      </div>\n                    </Paper>\n                  </Grid>\n                  <br/>\n                </React.Fragment>\n            )}\n          </Grid>\n          <Grid item>\n            <Paper>\n              <div style={{padding: '10px', textAlign: 'center', fontWeight: 'bold'}}>\n                <h2>Estoque</h2>\n                <hr/>\n                Qtd. Cocas: {estoque.QtdCoca}\n                <br/>\n                Qtd. Fantas: {estoque.QtdFanta}\n              </div>\n            </Paper>\n          </Grid>\n          <Grid item>\n            {Object.keys(consumidores).map(nc => \n                <React.Fragment key={nc}>\n                  <Grid item xs={12}>\n                    <Paper style={resolveStyleProduto(consumidores[nc].produto)}>\n                      <div style={{padding: '10px', textAlign: 'center', fontWeight: 'bold'}}>\n                        <h2>Consumidor {nc}</h2>\n                        <hr/>\n                        {consumidores[nc].acao}: {consumidores[nc].produto}\n                      </div>\n                    </Paper>\n                  </Grid>\n                  <br/>\n                </React.Fragment>\n            )}\n          </Grid>\n      </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}